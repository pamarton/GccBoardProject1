
UM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000598  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b8  00800100  00800100  0000060c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000792  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000482  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3c  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a5ea  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042f  00000000  00000000  0000c456  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000c885  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003c30  00000000  00000000  0000c90d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	79 c0       	rjmp	.+242    	; 0x13c <__vector_18>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a8 3b       	cpi	r26, 0xB8	; 184
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	f3 d1       	rcall	.+998    	; 0x498 <main>
  b2:	70 c2       	rjmp	.+1248   	; 0x594 <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <init_can>:

/**************************************************************************************************
*   init_can(); - See 'can.h' Header file for Description
**************************************************************************************************/
void init_can(void)
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
 CANGCON = _BV(SWRES);							//Reset CAN controller
  ba:	e8 ed       	ldi	r30, 0xD8	; 216
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24

 CANBT1 = (BRP_VALUE - 1) << 1;
  c2:	8e ef       	ldi	r24, 0xFE	; 254
  c4:	80 93 e2 00 	sts	0x00E2, r24
 CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	80 93 e3 00 	sts	0x00E3, r24
 CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
  ce:	87 e3       	ldi	r24, 0x37	; 55
  d0:	80 93 e4 00 	sts	0x00E4, r24

 CANTIM = 0;
  d4:	10 92 e7 00 	sts	0x00E7, r1
  d8:	10 92 e6 00 	sts	0x00E6, r1
 CANTTC = 0;
  dc:	10 92 e9 00 	sts	0x00E9, r1
  e0:	10 92 e8 00 	sts	0x00E8, r1

 CANHPMOB = 0;
  e4:	10 92 ec 00 	sts	0x00EC, r1
 CANTCON = 0;
  e8:	10 92 e5 00 	sts	0x00E5, r1

 CANPAGE = 0 << 4;								//Switch to Mob 0 access
  ec:	cd ee       	ldi	r28, 0xED	; 237
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	18 82       	st	Y, r1
 CANSTMOB = 0;
  f2:	ae ee       	ldi	r26, 0xEE	; 238
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	1c 92       	st	X, r1
 CANPAGE = 1 << 4;								//Switch to Mob 1 access
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	88 83       	st	Y, r24
 CANSTMOB = 0;
  fc:	1c 92       	st	X, r1
 #if CAN_V==CAN2A
 CANIDM4 = ACCPT_MASK_RTR << 2 | ACCPT_MASK_IDE;
  fe:	10 92 f4 00 	sts	0x00F4, r1
 CANIDM2 = (ACCPT_MASK_ID << 5) & 0xFF;
 102:	10 92 f6 00 	sts	0x00F6, r1
 CANIDM1 = (ACCPT_MASK_ID >> 3) & 0xFF;
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	80 93 f7 00 	sts	0x00F7, r24
 CANIDT4 = ACCPT_TAG_RTR << 2 | ACCPT_TAG_RB0;
 10c:	10 92 f0 00 	sts	0x00F0, r1
 CANIDT2 = (ACCPT_TAG_ID << 5) & 0xFF;
 110:	10 92 f2 00 	sts	0x00F2, r1
 CANIDT1 = (ACCPT_TAG_ID >> 3) & 0xFF;
 114:	10 92 f3 00 	sts	0x00F3, r1
 CANIDT3 = (ACCPT_TAG_ID >> 5) & 0xFF;
 CANIDT2 = (ACCPT_TAG_ID >> 13) & 0xFF;
 CANIDT1 = ((long)ACCPT_TAG_ID >> 21) & 0xFF;
 #endif

 CANCDMOB = _BV(CONMOB1) | CAN_IDE;			//Set Mob 1 as RX and IDE
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	80 93 ef 00 	sts	0x00EF, r24

 CANEN2 = _BV(ENMOB1) | _BV(ENMOB0);			//Enable Mob 0 and 1
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	80 93 dc 00 	sts	0x00DC, r24
 CANIE2 = _BV(ENMOB1) | _BV(ENMOB0);			//Enable Mob 0 and 1 Interrupt
 124:	80 93 de 00 	sts	0x00DE, r24
 CANGIE = _BV(ENIT) | _BV(ENRX) | _BV(ENTX);	//Enable TX and RX interrupt
 128:	80 eb       	ldi	r24, 0xB0	; 176
 12a:	80 93 db 00 	sts	0x00DB, r24
 CANGCON = _BV(ENASTB);							//Enable CAN controller
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 83       	st	Z, r24

 reset = 0;
 132:	10 92 00 01 	sts	0x0100, r1
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	0b b6       	in	r0, 0x3b	; 59
 148:	0f 92       	push	r0
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 unsigned char can_irq;
 volatile unsigned char canstmod;

 can_irq = CANSIT2;
 16a:	80 91 e0 00 	lds	r24, 0x00E0

 // TX
 if (can_irq & _BV(SIT0) && CANIE2 & _BV(ENMOB0)) {
 16e:	80 ff       	sbrs	r24, 0
 170:	47 c0       	rjmp	.+142    	; 0x200 <__vector_18+0xc4>
 172:	90 91 de 00 	lds	r25, 0x00DE
 176:	90 ff       	sbrs	r25, 0
 178:	43 c0       	rjmp	.+134    	; 0x200 <__vector_18+0xc4>
 	//Select TX Mob (=Mob0)
	CANPAGE = 0 << 4;
 17a:	10 92 ed 00 	sts	0x00ED, r1
	canstmod = CANSTMOB;
 17e:	ee ee       	ldi	r30, 0xEE	; 238
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	89 83       	std	Y+1, r24	; 0x01
	CANSTMOB&= ~_BV(TXOK);		//clear MB1, TX interrupt
 186:	80 81       	ld	r24, Z
 188:	8f 7b       	andi	r24, 0xBF	; 191
 18a:	80 83       	st	Z, r24
	if (tx_on != tx_off) {
 18c:	80 91 05 01 	lds	r24, 0x0105
 190:	90 91 04 01 	lds	r25, 0x0104
 194:	98 17       	cp	r25, r24
 196:	89 f1       	breq	.+98     	; 0x1fa <__vector_18+0xbe>
 		unsigned char pos;
 		pos = tx_off & (TX_SIZE-1);
 198:	87 70       	andi	r24, 0x07	; 7
 		//set ID
		#if CAN_V==CAN2A
		CANIDT4 = tx_frames[pos].array[0];
 19a:	2b e0       	ldi	r18, 0x0B	; 11
 19c:	82 9f       	mul	r24, r18
 19e:	c0 01       	movw	r24, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	fc 01       	movw	r30, r24
 1a4:	e8 5f       	subi	r30, 0xF8	; 248
 1a6:	fe 4f       	sbci	r31, 0xFE	; 254
 1a8:	20 81       	ld	r18, Z
 1aa:	20 93 f0 00 	sts	0x00F0, r18
		CANIDT2 = tx_frames[pos].array[0];
 1ae:	20 81       	ld	r18, Z
 1b0:	20 93 f2 00 	sts	0x00F2, r18
		CANIDT1 = tx_frames[pos].array[1];
 1b4:	21 81       	ldd	r18, Z+1	; 0x01
 1b6:	20 93 f3 00 	sts	0x00F3, r18
		CANIDT1 = tx_frames[pos].array[3];
		#endif


		//program data registers - auto increment CANMSG
		CANMSG = tx_frames[pos].data[0];
 1ba:	23 81       	ldd	r18, Z+3	; 0x03
 1bc:	aa ef       	ldi	r26, 0xFA	; 250
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	2c 93       	st	X, r18
		CANMSG = tx_frames[pos].data[1];
 1c2:	24 81       	ldd	r18, Z+4	; 0x04
 1c4:	2c 93       	st	X, r18
		CANMSG = tx_frames[pos].data[2];
 1c6:	25 81       	ldd	r18, Z+5	; 0x05
 1c8:	2c 93       	st	X, r18
		CANMSG = tx_frames[pos].data[3];
 1ca:	26 81       	ldd	r18, Z+6	; 0x06
 1cc:	2c 93       	st	X, r18
		CANMSG = tx_frames[pos].data[4];
 1ce:	27 81       	ldd	r18, Z+7	; 0x07
 1d0:	2c 93       	st	X, r18
		CANMSG = tx_frames[pos].data[5];
 1d2:	20 85       	ldd	r18, Z+8	; 0x08
 1d4:	2c 93       	st	X, r18
		CANMSG = tx_frames[pos].data[6];
 1d6:	21 85       	ldd	r18, Z+9	; 0x09
 1d8:	2c 93       	st	X, r18
		CANMSG = tx_frames[pos].data[7];
 1da:	22 85       	ldd	r18, Z+10	; 0x0a
 1dc:	2c 93       	st	X, r18
		//set length and request send
		CANCDMOB = _BV(CONMOB0) | CAN_IDE | tx_frames[pos].length;
 1de:	fc 01       	movw	r30, r24
 1e0:	e6 5f       	subi	r30, 0xF6	; 246
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	80 81       	ld	r24, Z
 1e6:	8f 70       	andi	r24, 0x0F	; 15
 1e8:	80 64       	ori	r24, 0x40	; 64
 1ea:	80 93 ef 00 	sts	0x00EF, r24
		tx_off++;
 1ee:	80 91 05 01 	lds	r24, 0x0105
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	80 93 05 01 	sts	0x0105, r24
 1f8:	7c c0       	rjmp	.+248    	; 0x2f2 <__vector_18+0x1b6>
 	}
 	else {
		tx_busy = 0;
 1fa:	10 92 03 01 	sts	0x0103, r1
 1fe:	79 c0       	rjmp	.+242    	; 0x2f2 <__vector_18+0x1b6>
	}
 }
 // RX
 else if (can_irq & _BV(SIT1) && CANIE2 & _BV(ENMOB1)) {
 200:	81 ff       	sbrs	r24, 1
 202:	77 c0       	rjmp	.+238    	; 0x2f2 <__vector_18+0x1b6>
 204:	80 91 de 00 	lds	r24, 0x00DE
 208:	81 ff       	sbrs	r24, 1
 20a:	73 c0       	rjmp	.+230    	; 0x2f2 <__vector_18+0x1b6>
 	//Select RX Mob (=Mob1)
	CANPAGE = 1 << 4;							//Switch to Mob 1 access
 20c:	80 e1       	ldi	r24, 0x10	; 16
 20e:	80 93 ed 00 	sts	0x00ED, r24
	if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
 212:	80 91 01 01 	lds	r24, 0x0101
 216:	28 2f       	mov	r18, r24
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	90 91 02 01 	lds	r25, 0x0102
 21e:	29 1b       	sub	r18, r25
 220:	31 09       	sbc	r19, r1
 222:	2f 77       	andi	r18, 0x7F	; 127
 224:	33 27       	eor	r19, r19
 226:	28 30       	cpi	r18, 0x08	; 8
 228:	31 05       	cpc	r19, r1
 22a:	0c f0       	brlt	.+2      	; 0x22e <__vector_18+0xf2>
 22c:	58 c0       	rjmp	.+176    	; 0x2de <__vector_18+0x1a2>
		unsigned char pos;
 		pos = rx_on & (RX_SIZE-1);
 22e:	e8 2f       	mov	r30, r24
 230:	e7 70       	andi	r30, 0x07	; 7
 		//Read length
		rx_frames[pos].length = CANCDMOB & 0x0F;
 232:	90 91 ef 00 	lds	r25, 0x00EF
 236:	2e 2f       	mov	r18, r30
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	4b e0       	ldi	r20, 0x0B	; 11
 23c:	e4 9f       	mul	r30, r20
 23e:	f0 01       	movw	r30, r0
 240:	11 24       	eor	r1, r1
 242:	e0 5a       	subi	r30, 0xA0	; 160
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	9f 70       	andi	r25, 0x0F	; 15
 248:	42 81       	ldd	r20, Z+2	; 0x02
 24a:	40 7f       	andi	r20, 0xF0	; 240
 24c:	94 2b       	or	r25, r20
 24e:	92 83       	std	Z+2, r25	; 0x02
		//Read ID
		#if CAN_V==CAN2A
		rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
 250:	90 91 f2 00 	lds	r25, 0x00F2
 254:	40 91 f0 00 	lds	r20, 0x00F0
 258:	47 70       	andi	r20, 0x07	; 7
 25a:	90 7e       	andi	r25, 0xE0	; 224
 25c:	94 2b       	or	r25, r20
 25e:	90 83       	st	Z, r25
		rx_frames[pos].array[1] = CANIDT1;
 260:	90 91 f3 00 	lds	r25, 0x00F3
 264:	91 83       	std	Z+1, r25	; 0x01
		rx_frames[pos].array[2] = CANIDT2;
		rx_frames[pos].array[3] = CANIDT1;
		#endif

		//read data registers - auto increment CANMSG
		rx_frames[pos].data[0] = CANMSG;
 266:	aa ef       	ldi	r26, 0xFA	; 250
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	9c 91       	ld	r25, X
 26c:	93 83       	std	Z+3, r25	; 0x03
		rx_frames[pos].data[1] = CANMSG;
 26e:	9c 91       	ld	r25, X
 270:	94 83       	std	Z+4, r25	; 0x04
		rx_frames[pos].data[2] = CANMSG;
 272:	9c 91       	ld	r25, X
 274:	95 83       	std	Z+5, r25	; 0x05
		rx_frames[pos].data[3] = CANMSG;
 276:	9c 91       	ld	r25, X
 278:	96 83       	std	Z+6, r25	; 0x06
		rx_frames[pos].data[4] = CANMSG;
 27a:	9c 91       	ld	r25, X
 27c:	97 83       	std	Z+7, r25	; 0x07
		rx_frames[pos].data[5] = CANMSG;
 27e:	9c 91       	ld	r25, X
 280:	90 87       	std	Z+8, r25	; 0x08
		rx_frames[pos].data[6] = CANMSG;
 282:	9c 91       	ld	r25, X
 284:	91 87       	std	Z+9, r25	; 0x09
		rx_frames[pos].data[7] = CANMSG;
 286:	9c 91       	ld	r25, X
 288:	92 87       	std	Z+10, r25	; 0x0a
 		rx_on++;
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 01 01 	sts	0x0101, r24

		//reset if reset can message
		if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
 290:	40 81       	ld	r20, Z
 292:	42 95       	swap	r20
 294:	46 95       	lsr	r20
 296:	47 70       	andi	r20, 0x07	; 7
 298:	51 81       	ldd	r21, Z+1	; 0x01
 29a:	65 2f       	mov	r22, r21
 29c:	66 0f       	add	r22, r22
 29e:	66 0f       	add	r22, r22
 2a0:	66 0f       	add	r22, r22
 2a2:	86 2f       	mov	r24, r22
 2a4:	84 2b       	or	r24, r20
 2a6:	95 2f       	mov	r25, r21
 2a8:	92 95       	swap	r25
 2aa:	96 95       	lsr	r25
 2ac:	97 70       	andi	r25, 0x07	; 7
 2ae:	89 2b       	or	r24, r25
 2b0:	b1 f4       	brne	.+44     	; 0x2de <__vector_18+0x1a2>
 2b2:	8b e0       	ldi	r24, 0x0B	; 11
 2b4:	82 9f       	mul	r24, r18
 2b6:	f0 01       	movw	r30, r0
 2b8:	83 9f       	mul	r24, r19
 2ba:	f0 0d       	add	r31, r0
 2bc:	11 24       	eor	r1, r1
 2be:	e0 5a       	subi	r30, 0xA0	; 160
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	83 81       	ldd	r24, Z+3	; 0x03
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	59 f4       	brne	.+22     	; 0x2de <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 2c8:	98 e0       	ldi	r25, 0x08	; 8
 2ca:	88 e1       	ldi	r24, 0x18	; 24
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	a8 95       	wdr
 2d2:	80 93 60 00 	sts	0x0060, r24
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	90 93 60 00 	sts	0x0060, r25
			wdt_enable(WDTO_15MS);
			while(1); //wait for watchdog
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__vector_18+0x1a0>
		}


 	}
	//clear irq
	canstmod = CANSTMOB;
 2de:	ee ee       	ldi	r30, 0xEE	; 238
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	89 83       	std	Y+1, r24	; 0x01
	CANSTMOB&= ~_BV(RXOK);
 2e6:	80 81       	ld	r24, Z
 2e8:	8f 7d       	andi	r24, 0xDF	; 223
 2ea:	80 83       	st	Z, r24
	CANCDMOB = _BV(CONMOB1) | CAN_IDE;			//Set Mob 1 as RX and IDE
 2ec:	80 e8       	ldi	r24, 0x80	; 128
 2ee:	80 93 ef 00 	sts	0x00EF, r24

 }
}
 2f2:	0f 90       	pop	r0
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0b be       	out	0x3b, r0	; 59
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <send_can_frame>:

/**************************************************************************************************
*   send_can_frame(); - See 'can.h' Header file for Description
**************************************************************************************************/
unsigned char send_can_frame(union can_frame *frame)
{
 31c:	dc 01       	movw	r26, r24
 unsigned char result;

 result = 0;
 CANGIE&= ~_BV(ENIT);
 31e:	eb ed       	ldi	r30, 0xDB	; 219
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	8f 77       	andi	r24, 0x7F	; 127
 326:	80 83       	st	Z, r24
 if (!tx_busy) {
 328:	80 91 03 01 	lds	r24, 0x0103
 32c:	81 11       	cpse	r24, r1
 32e:	3a c0       	rjmp	.+116    	; 0x3a4 <send_can_frame+0x88>
	CANPAGE = 0 << 4;							//Switch to Mob 0 access
 330:	10 92 ed 00 	sts	0x00ED, r1
	//set ID
	#if CAN_V==CAN2A
	CANIDT4 = frame->array[0];
 334:	8c 91       	ld	r24, X
 336:	80 93 f0 00 	sts	0x00F0, r24
	CANIDT2 = frame->array[0];
 33a:	8c 91       	ld	r24, X
 33c:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT1 = frame->array[1];
 340:	11 96       	adiw	r26, 0x01	; 1
 342:	8c 91       	ld	r24, X
 344:	11 97       	sbiw	r26, 0x01	; 1
 346:	80 93 f3 00 	sts	0x00F3, r24
	CANIDT3 = frame->array[1];
	CANIDT2 = frame->array[2];
	CANIDT1 = frame->array[3];
	#endif
	//program data registers - auto increment
	CANMSG = frame->data[0];
 34a:	13 96       	adiw	r26, 0x03	; 3
 34c:	8c 91       	ld	r24, X
 34e:	13 97       	sbiw	r26, 0x03	; 3
 350:	ea ef       	ldi	r30, 0xFA	; 250
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 83       	st	Z, r24
	CANMSG = frame->data[1];
 356:	14 96       	adiw	r26, 0x04	; 4
 358:	8c 91       	ld	r24, X
 35a:	14 97       	sbiw	r26, 0x04	; 4
 35c:	80 83       	st	Z, r24
	CANMSG = frame->data[2];
 35e:	15 96       	adiw	r26, 0x05	; 5
 360:	8c 91       	ld	r24, X
 362:	15 97       	sbiw	r26, 0x05	; 5
 364:	80 83       	st	Z, r24
	CANMSG = frame->data[3];
 366:	16 96       	adiw	r26, 0x06	; 6
 368:	8c 91       	ld	r24, X
 36a:	16 97       	sbiw	r26, 0x06	; 6
 36c:	80 83       	st	Z, r24
	CANMSG = frame->data[4];
 36e:	17 96       	adiw	r26, 0x07	; 7
 370:	8c 91       	ld	r24, X
 372:	17 97       	sbiw	r26, 0x07	; 7
 374:	80 83       	st	Z, r24
	CANMSG = frame->data[5];
 376:	18 96       	adiw	r26, 0x08	; 8
 378:	8c 91       	ld	r24, X
 37a:	18 97       	sbiw	r26, 0x08	; 8
 37c:	80 83       	st	Z, r24
	CANMSG = frame->data[6];
 37e:	19 96       	adiw	r26, 0x09	; 9
 380:	8c 91       	ld	r24, X
 382:	19 97       	sbiw	r26, 0x09	; 9
 384:	80 83       	st	Z, r24
	CANMSG = frame->data[7];
 386:	1a 96       	adiw	r26, 0x0a	; 10
 388:	8c 91       	ld	r24, X
 38a:	1a 97       	sbiw	r26, 0x0a	; 10
 38c:	80 83       	st	Z, r24
	result = 1;
	tx_busy = 1;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 03 01 	sts	0x0103, r24
	//set length, start send which restarts tx interrupt
	CANCDMOB = _BV(CONMOB0) | CAN_IDE | frame->length;
 394:	12 96       	adiw	r26, 0x02	; 2
 396:	8c 91       	ld	r24, X
 398:	8f 70       	andi	r24, 0x0F	; 15
 39a:	80 64       	ori	r24, 0x40	; 64
 39c:	80 93 ef 00 	sts	0x00EF, r24
	CANMSG = frame->data[3];
	CANMSG = frame->data[4];
	CANMSG = frame->data[5];
	CANMSG = frame->data[6];
	CANMSG = frame->data[7];
	result = 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	26 c0       	rjmp	.+76     	; 0x3f0 <send_can_frame+0xd4>
	tx_busy = 1;
	//set length, start send which restarts tx interrupt
	CANCDMOB = _BV(CONMOB0) | CAN_IDE | frame->length;
 }
 else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
 3a4:	60 91 04 01 	lds	r22, 0x0104
 3a8:	86 2f       	mov	r24, r22
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	20 91 05 01 	lds	r18, 0x0105
 3b0:	82 1b       	sub	r24, r18
 3b2:	91 09       	sbc	r25, r1
 3b4:	8f 77       	andi	r24, 0x7F	; 127
 3b6:	99 27       	eor	r25, r25
 3b8:	08 97       	sbiw	r24, 0x08	; 8
 3ba:	c9 f0       	breq	.+50     	; 0x3ee <send_can_frame+0xd2>
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 	result = 1;
	unsigned char i;
 	for (i=0;i<CAN_FRAME_SIZE;i++) {
		tx_frames[tx_on & (TX_SIZE-1)].array[i] = frame->array[i];
 3c0:	46 2f       	mov	r20, r22
 3c2:	47 70       	andi	r20, 0x07	; 7
 3c4:	8b e0       	ldi	r24, 0x0B	; 11
 3c6:	48 9f       	mul	r20, r24
 3c8:	a0 01       	movw	r20, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	8d 91       	ld	r24, X+
 3ce:	fa 01       	movw	r30, r20
 3d0:	e2 0f       	add	r30, r18
 3d2:	f3 1f       	adc	r31, r19
 3d4:	e8 5f       	subi	r30, 0xF8	; 248
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	80 83       	st	Z, r24
 3da:	2f 5f       	subi	r18, 0xFF	; 255
 3dc:	3f 4f       	sbci	r19, 0xFF	; 255
	CANCDMOB = _BV(CONMOB0) | CAN_IDE | frame->length;
 }
 else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
 	result = 1;
	unsigned char i;
 	for (i=0;i<CAN_FRAME_SIZE;i++) {
 3de:	2b 30       	cpi	r18, 0x0B	; 11
 3e0:	31 05       	cpc	r19, r1
 3e2:	a1 f7       	brne	.-24     	; 0x3cc <send_can_frame+0xb0>
		tx_frames[tx_on & (TX_SIZE-1)].array[i] = frame->array[i];
 	}
	tx_on++;
 3e4:	6f 5f       	subi	r22, 0xFF	; 255
 3e6:	60 93 04 01 	sts	0x0104, r22
 	result = 1;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <send_can_frame+0xd4>
**************************************************************************************************/
unsigned char send_can_frame(union can_frame *frame)
{
 unsigned char result;

 result = 0;
 3ee:	80 e0       	ldi	r24, 0x00	; 0
		tx_frames[tx_on & (TX_SIZE-1)].array[i] = frame->array[i];
 	}
	tx_on++;
 	result = 1;
 }
 CANGIE|= _BV(ENIT);
 3f0:	eb ed       	ldi	r30, 0xDB	; 219
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	90 81       	ld	r25, Z
 3f6:	90 68       	ori	r25, 0x80	; 128
 3f8:	90 83       	st	Z, r25
 return result;
}
 3fa:	08 95       	ret

000003fc <read_can_frame>:
/**************************************************************************************************
*   read_can_frame(); - See 'can.h' Header file for Description
**************************************************************************************************/
union can_frame *read_can_frame(void)
{
 return &rx_frames[(rx_off & (RX_SIZE-1))];
 3fc:	80 91 02 01 	lds	r24, 0x0102
 400:	87 70       	andi	r24, 0x07	; 7
 402:	2b e0       	ldi	r18, 0x0B	; 11
 404:	82 9f       	mul	r24, r18
 406:	c0 01       	movw	r24, r0
 408:	11 24       	eor	r1, r1
}
 40a:	80 5a       	subi	r24, 0xA0	; 160
 40c:	9e 4f       	sbci	r25, 0xFE	; 254
 40e:	08 95       	ret

00000410 <next_can_frame>:
/**************************************************************************************************
*   next_can_frame(); - See 'can.h' Header file for Description
**************************************************************************************************/
void next_can_frame(void)
{
 if (rx_on != rx_off) {
 410:	80 91 02 01 	lds	r24, 0x0102
 414:	90 91 01 01 	lds	r25, 0x0101
 418:	98 17       	cp	r25, r24
 41a:	19 f0       	breq	.+6      	; 0x422 <next_can_frame+0x12>
 	rx_off++;
 41c:	8f 5f       	subi	r24, 0xFF	; 255
 41e:	80 93 02 01 	sts	0x0102, r24
 422:	08 95       	ret

00000424 <new_can_frame>:
**************************************************************************************************/
unsigned char new_can_frame(void)
{
 unsigned char result;

 if (rx_on != rx_off)							//check for new data on rx pdu buffer
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	20 91 01 01 	lds	r18, 0x0101
 42a:	90 91 02 01 	lds	r25, 0x0102
 42e:	29 13       	cpse	r18, r25
 430:	01 c0       	rjmp	.+2      	; 0x434 <new_can_frame+0x10>
 432:	80 e0       	ldi	r24, 0x00	; 0
	result = 1;
 else
	result = 0;
 return result;
}
 434:	08 95       	ret

00000436 <send_can_message>:


void send_can_message(int id, unsigned char data, union can_frame* msg){
 436:	fa 01       	movw	r30, r20


	msg->id = id;
 438:	38 2f       	mov	r19, r24
 43a:	32 95       	swap	r19
 43c:	33 0f       	add	r19, r19
 43e:	30 7e       	andi	r19, 0xE0	; 224
 440:	20 81       	ld	r18, Z
 442:	2f 71       	andi	r18, 0x1F	; 31
 444:	23 2b       	or	r18, r19
 446:	20 83       	st	Z, r18
 448:	92 95       	swap	r25
 44a:	99 0f       	add	r25, r25
 44c:	90 7e       	andi	r25, 0xE0	; 224
 44e:	86 95       	lsr	r24
 450:	86 95       	lsr	r24
 452:	86 95       	lsr	r24
 454:	89 2b       	or	r24, r25
 456:	81 83       	std	Z+1, r24	; 0x01
	msg->length = 1;
 458:	82 81       	ldd	r24, Z+2	; 0x02
 45a:	80 7f       	andi	r24, 0xF0	; 240
 45c:	81 60       	ori	r24, 0x01	; 1
 45e:	82 83       	std	Z+2, r24	; 0x02
	msg->data[0] = data;
 460:	63 83       	std	Z+3, r22	; 0x03

	send_can_frame(msg);
 462:	ca 01       	movw	r24, r20
 464:	5b cf       	rjmp	.-330    	; 0x31c <send_can_frame>
 466:	08 95       	ret

00000468 <toggleLed>:
		}
	}
}

void toggleLed(){
	if (state == 0)
 468:	80 91 06 01 	lds	r24, 0x0106
 46c:	90 91 07 01 	lds	r25, 0x0107
 470:	89 2b       	or	r24, r25
 472:	51 f4       	brne	.+20     	; 0x488 <toggleLed+0x20>
	{
		PORTB &= ~((1 << PB5)|(1<<PB6)|(1<<PB7));
 474:	85 b1       	in	r24, 0x05	; 5
 476:	8f 71       	andi	r24, 0x1F	; 31
 478:	85 b9       	out	0x05, r24	; 5
		state = 1;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	90 93 07 01 	sts	0x0107, r25
 482:	80 93 06 01 	sts	0x0106, r24
 486:	08 95       	ret
		} else {
		PORTB |= (1 << PB5)|(1<<PB6)|(1<<PB7);
 488:	85 b1       	in	r24, 0x05	; 5
 48a:	80 6e       	ori	r24, 0xE0	; 224
 48c:	85 b9       	out	0x05, r24	; 5
		state = 0;
 48e:	10 92 07 01 	sts	0x0107, r1
 492:	10 92 06 01 	sts	0x0106, r1
 496:	08 95       	ret

00000498 <main>:
volatile int state = 0;
//#include "tim.h"
void toggleLed(void);

int main(void)
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
 4a0:	66 97       	sbiw	r28, 0x16	; 22
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
	
	cli();			//Setup CAN
 4ac:	f8 94       	cli
	init_can();		
 4ae:	03 de       	rcall	.-1018   	; 0xb6 <init_can>
	DDRB |= 0b11111111;
 4b0:	84 b1       	in	r24, 0x04	; 4
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB5)|(1<<PB6)|(1<<PB7);
 4b6:	85 b1       	in	r24, 0x05	; 5
 4b8:	80 6e       	ori	r24, 0xE0	; 224
 4ba:	85 b9       	out	0x05, r24	; 5
	
	sei();
 4bc:	78 94       	sei
		
	union can_frame CAN_test;
	CAN_test.id = 1;				//ID	
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	8f 71       	andi	r24, 0x1F	; 31
 4c2:	80 62       	ori	r24, 0x20	; 32
 4c4:	89 83       	std	Y+1, r24	; 0x01
 4c6:	1a 82       	std	Y+2, r1	; 0x02
	CAN_test.data[0] = 1;			//DATA
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	8c 83       	std	Y+4, r24	; 0x04
	CAN_test.length = 1;			//LENGDE
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	80 7f       	andi	r24, 0xF0	; 240
 4d0:	81 60       	ori	r24, 0x01	; 1
 4d2:	8b 83       	std	Y+3, r24	; 0x03
	
	toggleLed();
 4d4:	c9 df       	rcall	.-110    	; 0x468 <toggleLed>
 4d6:	84 e6       	ldi	r24, 0x64	; 100
 4d8:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4da:	ef e5       	ldi	r30, 0x5F	; 95
 4dc:	fa ee       	ldi	r31, 0xEA	; 234
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <main+0x46>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <main+0x4c>
 4e4:	00 00       	nop
 4e6:	01 97       	sbiw	r24, 0x01	; 1
	
	// MAIN CONTROL LOOP
	for(int i =0; i< 100;i++){ //delay
 4e8:	c1 f7       	brne	.-16     	; 0x4da <main+0x42>
		_delay_ms(TID);	
	}
	send_can_message(CAN_test.id, CAN_test.data, &CAN_test);
 4ea:	be 01       	movw	r22, r28
 4ec:	6c 5f       	subi	r22, 0xFC	; 252
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	82 95       	swap	r24
 4f4:	86 95       	lsr	r24
 4f6:	87 70       	andi	r24, 0x07	; 7
 4f8:	9a 81       	ldd	r25, Y+2	; 0x02
 4fa:	29 2f       	mov	r18, r25
 4fc:	22 0f       	add	r18, r18
 4fe:	22 0f       	add	r18, r18
 500:	22 0f       	add	r18, r18
 502:	ae 01       	movw	r20, r28
 504:	4f 5f       	subi	r20, 0xFF	; 255
 506:	5f 4f       	sbci	r21, 0xFF	; 255
 508:	82 2b       	or	r24, r18
 50a:	92 95       	swap	r25
 50c:	96 95       	lsr	r25
 50e:	97 70       	andi	r25, 0x07	; 7
 510:	92 df       	rcall	.-220    	; 0x436 <send_can_message>
	toggleLed();
 512:	aa df       	rcall	.-172    	; 0x468 <toggleLed>
	for (;;) {
		if (new_can_frame()) {
			union can_frame *CAN_test;		//temporaraly declare space on stack
			CAN_test = read_can_frame();
			if (CAN_test->id == 3) {
				toggleLed();
 514:	0f 2e       	mov	r0, r31
 516:	f4 e6       	ldi	r31, 0x64	; 100
 518:	df 2e       	mov	r13, r31
 51a:	f0 2d       	mov	r31, r0
 51c:	e1 2c       	mov	r14, r1
				for(int i =0; i< 100;i++){ //delay
					_delay_ms(TID);
				}
				union can_frame CAN_test;
				CAN_test.id = 1;				//ID
				CAN_test.data[0] = 1;			//DATA
 51e:	ff 24       	eor	r15, r15
 520:	f3 94       	inc	r15
				CAN_test.length = 1;			//LENGDE
					
				send_can_message(CAN_test.id, CAN_test.data, &CAN_test);
 522:	8e 01       	movw	r16, r28
 524:	01 5f       	subi	r16, 0xF1	; 241
 526:	1f 4f       	sbci	r17, 0xFF	; 255
	send_can_message(CAN_test.id, CAN_test.data, &CAN_test);
	toggleLed();
	
	// MAIN CONTROL LOOP
	for (;;) {
		if (new_can_frame()) {
 528:	7d df       	rcall	.-262    	; 0x424 <new_can_frame>
 52a:	88 23       	and	r24, r24
 52c:	e9 f3       	breq	.-6      	; 0x528 <main+0x90>
			union can_frame *CAN_test;		//temporaraly declare space on stack
			CAN_test = read_can_frame();
 52e:	66 df       	rcall	.-308    	; 0x3fc <read_can_frame>
 530:	fc 01       	movw	r30, r24
			if (CAN_test->id == 3) {
 532:	90 81       	ld	r25, Z
 534:	92 95       	swap	r25
 536:	96 95       	lsr	r25
 538:	97 70       	andi	r25, 0x07	; 7
 53a:	81 81       	ldd	r24, Z+1	; 0x01
 53c:	48 2f       	mov	r20, r24
 53e:	44 0f       	add	r20, r20
 540:	44 0f       	add	r20, r20
 542:	44 0f       	add	r20, r20
 544:	24 2f       	mov	r18, r20
 546:	29 2b       	or	r18, r25
 548:	38 2f       	mov	r19, r24
 54a:	32 95       	swap	r19
 54c:	36 95       	lsr	r19
 54e:	37 70       	andi	r19, 0x07	; 7
 550:	23 30       	cpi	r18, 0x03	; 3
 552:	31 05       	cpc	r19, r1
 554:	e9 f4       	brne	.+58     	; 0x590 <main+0xf8>
				toggleLed();
 556:	88 df       	rcall	.-240    	; 0x468 <toggleLed>
 558:	8d 2d       	mov	r24, r13
 55a:	9e 2d       	mov	r25, r14
 55c:	ef e5       	ldi	r30, 0x5F	; 95
 55e:	fa ee       	ldi	r31, 0xEA	; 234
 560:	31 97       	sbiw	r30, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <main+0xc8>
 564:	00 c0       	rjmp	.+0      	; 0x566 <main+0xce>
 566:	00 00       	nop
 568:	01 97       	sbiw	r24, 0x01	; 1
				for(int i =0; i< 100;i++){ //delay
 56a:	c1 f7       	brne	.-16     	; 0x55c <main+0xc4>
					_delay_ms(TID);
				}
				union can_frame CAN_test;
				CAN_test.id = 1;				//ID
 56c:	8c 85       	ldd	r24, Y+12	; 0x0c
 56e:	8f 71       	andi	r24, 0x1F	; 31
 570:	80 62       	ori	r24, 0x20	; 32
 572:	8c 87       	std	Y+12, r24	; 0x0c
 574:	1d 86       	std	Y+13, r1	; 0x0d
				CAN_test.data[0] = 1;			//DATA
 576:	ff 86       	std	Y+15, r15	; 0x0f
				CAN_test.length = 1;			//LENGDE
 578:	8e 85       	ldd	r24, Y+14	; 0x0e
 57a:	80 7f       	andi	r24, 0xF0	; 240
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	8e 87       	std	Y+14, r24	; 0x0e
					
				send_can_message(CAN_test.id, CAN_test.data, &CAN_test);
 580:	ae 01       	movw	r20, r28
 582:	44 5f       	subi	r20, 0xF4	; 244
 584:	5f 4f       	sbci	r21, 0xFF	; 255
 586:	60 2f       	mov	r22, r16
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	54 df       	rcall	.-344    	; 0x436 <send_can_message>
				toggleLed();
 58e:	6c df       	rcall	.-296    	; 0x468 <toggleLed>
			}
			next_can_frame();
 590:	3f df       	rcall	.-386    	; 0x410 <next_can_frame>
 592:	ca cf       	rjmp	.-108    	; 0x528 <main+0x90>

00000594 <_exit>:
 594:	f8 94       	cli

00000596 <__stop_program>:
 596:	ff cf       	rjmp	.-2      	; 0x596 <__stop_program>
